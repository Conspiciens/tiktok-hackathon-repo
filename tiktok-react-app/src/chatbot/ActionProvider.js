import React from "react";
import { wishlist } from "../Wishlist";
import OpenAI from "openai";
import data_file from "../data.json"

const OPENAI_KEY = "";
const openai = new OpenAI({ apiKey: OPENAI_KEY, dangerouslyAllowBrowser: true });

function stringToBoolean(str) {
    // Convert string to uppercase to handle case insensitivity
    return str.toUpperCase() === 'TRUE';
  }

async function ChatGPTmain(prompt) {
    let askingForReccResponse
    const askingForRecc = "ONLY ANSWER THIS QUESTION WITH THE WORD TRUE OR THE WORD FALSE. Is this person asking for product recommendations, gift ideas, or ideas for what to buy?: " + prompt
    try {
        const completion = await openai.chat.completions.create({
          messages: [{ role: "system", content: askingForRecc }],
          model: "gpt-4",
        });
    
        askingForReccResponse = completion.choices[0].message.content;
        console.log(askingForRecc);
        console.log(askingForReccResponse);
        
  
      } catch (error) {
        console.error("Error in ChatGPTmain:", error);
        return null;
    }

    if(stringToBoolean(askingForReccResponse)){
        console.log("TRUE!");
        return giveRecc(prompt);
    }
    else{
        return askingQuestion(prompt);
    }
  }

async function giveRecc(prompt){
    //Tell GPT to look at its memory
    let memory = JSON.parse(JSON.stringify(data_file)); 
    console.log(memory[0])
    let command = "You are ChatGPT with memory capabilities. You are to find the most relevant context for the provided user inquiry, conversation history and the links given. Do not create other new items, used the given uuid and contexts to find the best item. return only a UUID, nothing else"; 

    let context = "User Request: " + prompt + " (UUID: ";

    for (let key in memory){
        context += memory[key]['uuid']; 
        context += " Context: "; 
        context += memory[key]['context'];
        context += " ) (UUID: "
    }
    

    console.log(context);
    console.log(command);

    let uuid; 
    try {

        const request = await openai.chat.completions.create({
            messages: [
                { "role": "system", "content": command},
                {"role": "user", "content": context},
            ],
            model: "gpt-4", 
        }); 
        console.log("Complete request");

        console.log(request.choices[0].message.content);
        uuid = request.choices[0].message.content;
    } catch (error){
        console.log(error);
    } 


    try {
        if (uuid){
            for (let content in memory){
                if (memory[content]['uuid'] == uuid){
                    let format = {
                        product_img: memory[content]['image_link'],    
                        urls: JSON.stringify(memory[content]['top_results'][0])
                    }; 

                    // let formatted = memory[content]['top_results'].map((eachLink) => (
                    //     {
                    //         product_img: memory[content]['image_link'],

                    //     }
                    // ))
                    return JSON.stringify(format); 
                }
            }
        }
    } catch (error){
        console.log(error);
    }

    //Tell GPT to add the items to the list

    return "Let me think about it some more"
}

async function askingQuestion(prompt){
    try {
        const completion = await openai.chat.completions.create({
          messages: [{ role: "system", content: "Keep your response short. " + prompt }],
          model: "gpt-3.5-turbo",
        });
    
        const response = completion.choices[0].message.content;
        return response;
  
      } catch (error) {
        console.error("Error in ChatGPTmain:", error);
        return null; // or handle the error as needed
      }
}

const ActionProvider = ({ createChatBotMessage, setState, children}) => {
    async function handleMessage(userMessage) {
        // This function should generate a response from ChatGPT
        let GPTresponse = await ChatGPTmain(userMessage);
        const botResponse = createChatBotMessage("Here are the links I found for you: ", {
            widget: "productLink"
        })

        let isParse = true;
        try {
            GPTresponse = JSON.parse(GPTresponse);
        } catch (error) {
            isParse = false;             
        }

        if (isParse == false) 
            return; 

        console.log(GPTresponse);
        let url = GPTresponse["urls"];

        // Sample links generated by ChatGPT
        const linksGeneratedByChatGPT = [
            {
                product_name: "",
                product_img: GPTresponse["product_img"],
                url: JSON.parse(GPTresponse["urls"]),
            },
            {
                product_name: "Van Cleef Bracelet",
                product_img: "./sample-wishlist/van-cleef-bracelet.avif",
                url: "https://www.vancleefarpels.com/us/en/collections/jewelry/alhambra/vcara41300---vintage-alhambra-bracelet-5-motifs.html?&mid=793f1p4799&mkwid=s_dc&pcrid=522813558171&kword=&match=&plid=&gad_source=1&gclid=Cj0KCQjw1qO0BhDwARIsANfnkv_SZZf3KB7VdgBKbb_AT1x-yCpBAYHnB57kRmmhH2z8QMhz24EWnZMaAjdBEALw_wcB&gclsrc=aw.ds",
            },
        ]

        // Appending each new link to wishlist link - may reconsider using sessionStorage for persistence
        linksGeneratedByChatGPT.forEach((newLink) => wishlist.push(newLink))

        // Setting values for new messages array and linksToDisplay inside state
        setState((prev) => ({
            ...prev,
            messages: [...prev.messages, botResponse],
            linksToDisplay: linksGeneratedByChatGPT,
        }))
    }

    function handleHello() {
        const botResponse = createChatBotMessage("Hi, my name is TikTok On The Clock, it's very nice to meet you! I can use TikTok videos to search for links that best fit your inquiry.")

        setState((prev) => ({
            ...prev,
            messages: [...prev.messages, botResponse],
        }))
    }

    function handleGoodbye() {
        const botResponse = createChatBotMessage("Goodbye, please let me know if there is anything else I can help you with.")

        setState((prev) => ({
            ...prev,
            messages: [...prev.messages, botResponse],
        }))
    }

    return (
        <div>
            {React.Children.map(children, (child) => {
                return React.cloneElement(child, {
                    actions: { handleMessage, handleHello, handleGoodbye },
                })
            })}
        </div>
    )
}

export default ActionProvider;