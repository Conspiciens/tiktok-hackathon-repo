import React from "react";
import { wishlist } from "../Wishlist";
import OpenAI from "openai";

const OPENAI_KEY = ""
const openai = new OpenAI({ apiKey: OPENAI_KEY, dangerouslyAllowBrowser: true });

async function ChatGPTmain(prompt) {
    try {
      const completion = await openai.chat.completions.create({
        messages: [{ role: "system", content: prompt }],
        model: "gpt-3.5-turbo",
      });
  
      const response = completion.choices[0].message.content;
      return response;

    } catch (error) {
      console.error("Error in ChatGPTmain:", error);
      return null; // or handle the error as needed
    }
  }


const ActionProvider = ({ createChatBotMessage, setState, children}) => {
    async function handleMessage(userMessage) {
        // This function should generate a response from ChatGPT
        const GPTresponse = await ChatGPTmain(userMessage);
        const botResponse = createChatBotMessage(GPTresponse, {
            widget: "productLink"
        })

        // Sample links generated by ChatGPT
        const linksGeneratedByChatGPT = [
            {
                product_name: "Satin Short Pajamas Set",
                product_img: "./sample-wishlist/pj-set.jpeg",
                url: "https://www.victoriassecret.com/us/vs/sleepwear-and-lingerie-catalog/5000006214?genericId=11172758&choice=5W3S&size1=L&size1=L&cm_mmc=PLA-_-GOOGLE-_-VSD_VS_All_PMAX_LIA-_-&gad_source=1&gclid=Cj0KCQjw1qO0BhDwARIsANfnkv81SZyAzyhxYmKizI6tfrEHm5hIlZMJCk-XuVRe_3Mc6FCi9Nh8S48aAttqEALw_wcB&gclsrc=aw.ds",
            },
            {
                product_name: "Van Cleef Bracelet",
                product_img: "./sample-wishlist/van-cleef-bracelet.avif",
                url: "https://www.vancleefarpels.com/us/en/collections/jewelry/alhambra/vcara41300---vintage-alhambra-bracelet-5-motifs.html?&mid=793f1p4799&mkwid=s_dc&pcrid=522813558171&kword=&match=&plid=&gad_source=1&gclid=Cj0KCQjw1qO0BhDwARIsANfnkv_SZZf3KB7VdgBKbb_AT1x-yCpBAYHnB57kRmmhH2z8QMhz24EWnZMaAjdBEALw_wcB&gclsrc=aw.ds",
            },
        ]

        // Appending each new link to wishlist link - may reconsider using sessionStorage for persistence
        linksGeneratedByChatGPT.forEach((newLink) => wishlist.push(newLink))


        // Setting values for new messages array and linksToDisplay inside state
        setState((prev) => ({
            ...prev,
            messages: [...prev.messages, botResponse],
            linksToDisplay: linksGeneratedByChatGPT,
        }))
    }

    function handleHello() {
        const botResponse = createChatBotMessage("Hi, my name is TikTok On The Clock, it's very nice to meet you! I can use TikTok videos to search for links that best fit your inquiry.")

        setState((prev) => ({
            ...prev,
            messages: [...prev.messages, botResponse],
        }))
    }

    function handleGoodbye() {
        const botResponse = createChatBotMessage("Goodbye, please let me know if there is anything else I can help you with.")

        setState((prev) => ({
            ...prev,
            messages: [...prev.messages, botResponse],
        }))
    }

    return (
        <div>
            {React.Children.map(children, (child) => {
                return React.cloneElement(child, {
                    actions: { handleMessage, handleHello, handleGoodbye },
                })
            })}
        </div>
    )
}

export default ActionProvider;